# Stubs for ssh2.channel (Python 3)

from typing import Any, Tuple, AnyStr, Optional
from ssh2.session import Session

import ssh2.exceptions

class Channel:
    session: Session = ...
    def __init__(*args, **kwargs) -> None: ...
    def close(self) -> int: ...
    def eof(self) -> bool: ...
    def execute(self, command: AnyStr) -> int: ...
    def flush(self) -> int: ...
    def flush_ex(self, stream_id: int) -> int: ...
    def flush_stderr(self) -> int: ...
    def get_exit_signal(self) -> Tuple[int, bytes, bytes, bytes]: ...
    def get_exit_status(self) -> int: ...
    def handle_extended_data(self, ignore_mode: int) -> None: ...
    def handle_extended_data2(self, ignore_mode: int) -> int: ...
    def ignore_extended_data(self, ignore_mode: int) -> None: ...
    def poll_channel_read(self, extended: int) -> int: ...
    def process_startup(self, request: AnyStr, message: Optional[AnyStr]=None) -> int: ...
    def pty(self, term: str='vt100') -> int: ...
    def read(self, size: int=1024) -> Tuple[int, bytes]: ...
    def read_ex(self, size: int=1024, stream_id: int=0) -> Tuple[int, bytes]: ...
    def read_stderr(self, size: int=1024) -> Tuple[int, bytes]: ...
    def receive_window_adjust(self, adjustment: int, force: int) -> int: ...
    def receive_window_adjust2(self, adjustment: int, force: int) -> int: ...
    def send_eof(self) -> int: ...
    def setenv(self, varname: AnyStr, value: AnyStr) -> int: ...
    def shell(self) -> int: ...
    def subsystem(self, subsystem: AnyStr) -> int: ...
    def wait_closed(self) -> int: ...
    def wait_eof(self) -> int: ...
    def window_read(self) -> int: ...
    def window_read_ex(self, read_avail: int, window_size_initial: int) -> int: ...
    def window_write(self) -> int: ...
    def window_write_ex(self, window_size_initial: int) -> int: ...
    def write(self, buf: AnyStr) -> Tuple[int, int]: ...
    def write_ex(self, stream_id: int, buf: AnyStr) -> Tuple[int, int]: ...
    def write_stderr(self, buf: AnyStr) -> Tuple[int, int]: ...
    def x11_req(self, screen_number: int) -> int: ...
    def x11_req_ex(self, single_connection: int, auth_proto: str, auth_cookie: int, screen_number: int) -> int: ...

class ChannelError(ssh2.exceptions.SSH2Error): ...
