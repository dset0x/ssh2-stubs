# Stubs for ssh2.session (Python 3)

from typing import Any, Tuple, Optional, AnyStr, List
from socket import socket

import ssh2.exceptions
import ssh2.agent.Agent
import ssh2.channel.Channel
import ssh2.listener.Listener
import ssh2.knownhost.KnownHost
import ssh2.publickey.PublicKeySystem
import ssh2.statinfo.StatInfo
import ssh2.fileinfo.FileInfo
import ssh2.sftp.SFTP

LIBSSH2_HOSTKEY_HASH_MD5: int
LIBSSH2_HOSTKEY_HASH_SHA1: int
LIBSSH2_HOSTKEY_TYPE_DSS: int
LIBSSH2_HOSTKEY_TYPE_RSA: int
LIBSSH2_HOSTKEY_TYPE_UNKNOWN: int
LIBSSH2_SESSION_BLOCK_INBOUND: int
LIBSSH2_SESSION_BLOCK_OUTBOUND: int

class ChannelError(ssh2.exceptions.SSH2Error): ...

class KnownHostError(ssh2.exceptions.SSH2Error): ...

class PublicKeyInitError(ssh2.exceptions.PublicKeyError): ...

class SessionHostKeyError(ssh2.exceptions.SessionError): ...

class Session:
    sock: Optional[socket] = ...
    def __init__(*args: Any, **kwargs: Any) -> None: ...
    def agent_auth(self, username: AnyStr) -> None: ...
    def agent_init(self) -> ssh2.agent.Agent: ...
    def block_directions(self) -> int: ...
    def direct_tcpip(self, host: AnyStr, port: int) -> ssh2.channel.Channel: ...
    def direct_tcpip_ex(self, host: AnyStr, port: int, shost: AnyStr, sport: int) -> ssh2.channel.Channel: ...
    def disconnect(self) -> None: ...
    def forward_listen(self, port: int) -> ssh2.listener.Listener: ...
    def forward_listen_ex(self, host: AnyStr, port: int, bound_port: int, queue_maxsize: int) -> ssh2.listener.Listener: ...
    def get_blocking(self) -> bool: ...
    def get_timeout(self) -> int: ...
    def handshake(self, sock: socket) -> int: ...
    def hostkey(self) -> Tuple[bytes, int]: ...
    def hostkey_hash(self, hash_type: int) -> bytes: ...
    def keepalive_config(self, boolwant_reply: bool, interval: int) -> None: ...
    def keepalive_send(self) -> int: ...
    def knownhost_init(self) -> ssh2.knownhost.KnownHost: ...
    def last_errno(self) -> int: ...
    def last_error(self, msg_size: int=1024) -> str: ...
    def open_session(self) -> ssh2.channel.Channel: ...
    def publickey_init(self) -> ssh2.publickey.PublicKeySystem: ...
    def scp_recv(self, path: AnyStr) -> Tuple[ssh2.channel.Channel, ssh2.statinfo.StatInfo]: ...
    def scp_recv2(self, path: AnyStr) -> Tuple[ssh2.channel.Channel, ssh2.fileinfo.FileInfo]: ...
    def scp_send(self, path: AnyStr, mode: int, size: int) -> ssh2.channel.Channel: ...
    def scp_send64(self, path: AnyStr, mode: int, size: int, mtime: float, atime: float) -> ssh2.channel.Channel: ...
    def set_blocking(self, blocking: bool) -> None: ...
    def set_last_error(self, errcode: int, errmsg: AnyStr) -> int: ...
    def set_timeout(self, timeout: int) -> None: ...
    def sftp_init(self) -> ssh2.sftp.SFTP: ...
    def startup(self, sock: socket) -> int: ...
    def userauth_authenticated(self) -> bool: ...
    def userauth_hostbased_fromfile(self, username: AnyStr, privatekey: AnyStr, hostname: AnyStr, publickey: Optional[AnyStr], passphrase: AnyStr='') -> int: ...
    def userauth_list(self, username: AnyStr) -> List[str]: ...
    def userauth_password(self, username: str, password: str) -> int: ...
    def userauth_publickey(self, username: AnyStr, pubkeydata: bytes) -> int: ...
    def userauth_publickey_fromfile(self, username: AnyStr, privatekey: AnyStr, passphrase: AnyStr, publickey: AnyStr) -> int: ...
    def userauth_publickey_frommemory(self, username: AnyStr, privatekeyfiledata: bytes, passphrase: AnyStr, publickeyfiledata: bytes) -> int: ...
